package org.jmlspecs.jmlunitng;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Date;
import java.util.Iterator;

import org.multijava.mjc.JCompilationUnit;
import org.multijava.mjc.JCompilationUnitType;
import org.multijava.mjc.JConstructorDeclaration;
import org.multijava.mjc.JMethodDeclaration;
import org.multijava.mjc.JPackageImportType;
import org.multijava.mjc.JTypeDeclarationType;

/**
 * Generates the JMLUNITNG_Test_Data class by JMLUNITNG framework.
 * The generated class provides data to run unit tests for the class to be
 * tested using JMLUNITNG testing framework.
 * @author Rinkesh Nagmoti
 * @version 1.0
 */
public class TestDataClassGenerator implements Constants
{


  /**
   * Represents the class name for the Test class to be generated.
   */
  protected String className;
  
  /** Writer class object to print the Test Class. */
  protected Writer writer;

  /** String representing the file name and location for Test Class. */
  protected final String my_file;

  /**
   * JTypeDeclarationType object which holds information about the class for
   * which the test is to be conducted.
   */
  protected JTypeDeclarationType declarationType;

  /**
   * This array represents the list of imported packages.
   */
  protected JPackageImportType[] pkgs;

  /** Constructs JMLUNITNGTestDataClassGenerator Object.
   * @param the_fileName
   * @throws FileNotFoundException 
   */
  public TestDataClassGenerator(final String the_fileName) throws FileNotFoundException
  {
    this.my_file = the_fileName;
    writer = new Writer(this.my_file);
  }

  /** 
   * Generate the Test Data methods.
   */
  public void createTestDataClass(final JTypeDeclarationType the_decl, 
                                  final JCompilationUnit the_cUnitType, final Iterator the_Iter)
  {
   printHeaderImportandJavadoc(the_decl, the_cUnitType);
   printConstructor();
   printDataProvider(the_Iter);
   printClassEnd();
  }
  /**
   * This method prints the header import and javadoc for generated class.
   * @param the_decl
   * @param the_cUnitType
   */
 
  private void printHeaderImportandJavadoc(final JTypeDeclarationType the_decl,
                                           final JCompilationUnitType the_cUnitType)
  {

    this.declarationType = the_decl;
    this.className = the_decl.ident() + TEST_DATA_NAME_POSTFIX;
    pkgs = the_cUnitType.importedPackages();
    
    writer.print("This class is generated by JMLUNITNG on " + new Date());
    writer.newLine(2);
    for (int j = 0; j < pkgs.length; j++)
    {
      writer.print("import " + pkgs[j].getName().replace('/', '.') + ".*;");
    }

    writer.print("/** This class is the data provider class generated by JMLUNITNG");
    writer.print(" testing framework");
    writer.print(" *  for class " + className);
    writer.print(" */");
    writer.print("public class " + className + " {");

   
  }
 
  /** Prints the constructor of the Test Data class to be generated.*/
  private void printConstructor()
  {
    writer.print("/** Constructs the class object.*/");
    writer.print("public " + className + " () {");
    writer.print("}");
  }

  /**  Prints the data provider methods.*/
  private void printDataProvider(Iterator the_method_Iterator)
  {
    while (the_method_Iterator.hasNext())
    {
      Object obj = the_method_Iterator.next();
      
      if (obj instanceof JConstructorDeclaration)
      {
        JConstructorDeclaration construct = (JConstructorDeclaration) obj;
        writer.print("/** This is the Data Provider method for method " +
                     construct.ident() + ".");
        writer.print("*/");
        writer.print("/*@ DataProvider @*/");
        writer.print("public void Test_Data_" +  construct.ident() + "()");
        writer.print("{");
        writer.print("}");
      }
      else if (obj instanceof JMethodDeclaration)
      {
        JMethodDeclaration method = (JMethodDeclaration) obj;
        writer.print("/** This is the Data Provider method for method " +
                     method.ident() + ".");
        writer.print("*/");
        writer.print("/*@ DataProvider @*/");
        writer.print("public void Test_Data_" +  method.ident() + "()");
        writer.print("{");
        writer.print("}");
      }
  
    }
  }
 
  private void printClassEnd()
  {
    writer.print("}");
  }
}