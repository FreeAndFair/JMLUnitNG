
package org.jmlspecs.jmlunitng;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import org.jmlspecs.jmlunit.strategies.IndefiniteIterator;
import org.multijava.mjc.JCompilationUnit;
import org.multijava.mjc.JCompilationUnitType;
import org.multijava.mjc.JConstructorDeclaration;
import org.multijava.mjc.JFormalParameter;
import org.multijava.mjc.JMethodDeclaration;
import org.multijava.mjc.JPackageImportType;
import org.multijava.mjc.JTypeDeclaration;
import org.multijava.mjc.JTypeDeclarationType;

/**
 * Generates the JMLUNITNG_Test_Data class by JMLUNITNG framework. The generated
 * class provides data to run unit tests for the class to be tested using
 * JMLUNITNG testing framework.
 * 
 * @author Rinkesh Nagmoti
 * @version 1.0
 */
public class TestDataClassGenerator implements Constants
{

  /**
   * Represents the class name for the Test class to be generated.
   */
  protected String className;
  /**
   * Represents the name of the class for which the test will be generated.
   */
  protected String classNm;

  /** Writer class object to print the Test Class. */
  protected Writer writer;

  /** String representing the file name and location for Test Class. */
  protected final String my_file;

  /**
   * JTypeDeclarationType object which holds information about the class for
   * which the test is to be conducted.
   */
  protected JTypeDeclarationType declarationType;

  /**
   * This array represents the list of imported packages.
   */
  protected JPackageImportType[] pkgs;

  /**
   * Constructs JMLUNITNGTestDataClassGenerator Object.
   * 
   * @param the_fileName
   * @throws FileNotFoundException
   */
  public TestDataClassGenerator(final String the_fileName) throws FileNotFoundException
  {
    this.my_file = the_fileName;
    writer = new Writer(this.my_file);
  }

  /**
   * Generate the Test Data methods.
   */
  public void createTestDataClass(final JTypeDeclarationType the_decl,
                        final JCompilationUnit the_cUnitType, final Iterator the_Iter)
  {
    
    classNm = the_decl.ident();
    printHeaderImportandJavadoc(the_decl, the_cUnitType);
    printConstructor();
    printCombinedIteratorClass(the_Iter, the_decl);
    printClassEnd();
  }

  /**
   * This method prints the header import and javadoc for generated class.
   * 
   * @param the_decl
   * @param the_cUnitType
   */

  private void printHeaderImportandJavadoc(final JTypeDeclarationType the_decl,
                                           final JCompilationUnitType the_cUnitType)
  {
    
    this.declarationType = the_decl;
    this.className = the_decl.ident() + TEST_DATA_NAME_POSTFIX;
    pkgs = the_cUnitType.importedPackages();

    writer.print("//This class is generated by JMLUNITNG on " + new Date());
    writer.newLine(2);
    for (int j = 0; j < pkgs.length; j++)
    {
      writer.print("import " + pkgs[j].getName().replace('/', '.') + ".*;");
    }
    writer.print("import org.multijava.*;");
    writer.print("import org.jmlspecs.jmlunit.strategies.*;");
    writer.print("import org.testng.*;");
    writer.print("import java.util.Iterator;");
    writer.print("import org.jmlspecs.jmlunitng.CombinedObjectParameterIterator;");
    writer.print("import org.jmlspecs.jmlunitng.CombinedParameterIterator;");
    writer.print("import org.testng.annotations.*;");
    writer.print("import java.util.*;");
    writer.newLine(2);
    writer.print("/** ");
    writer.print(" * This class is the data provider class generated by JMLUNITNG");
    writer.print(" * testing framework");
    writer.print(" * for class " + the_decl.ident() + ".");
    writer.print(" * @author JMLUNITNG");
    writer.print(" * @version 1.0");
    writer.print(" */");
    writer.print("public class " + className);
    writer.print("{");

  }

  /** Prints the constructor of the Test Data class to be generated. */
  private void printConstructor()
  {
    writer.indent(2);
    writer.print("/**");
    writer.indent(2);
    writer.print(" * Constructs the class object.");
    writer.indent(2);
    writer.print(" */");
    writer.indent(2);
    writer.print("public " + className + "()");
    writer.indent(2);
    writer.print("{");
    writer.indent(2);
    writer.print("}");
    writer.newLine(1);
  }

  /** Prints the data provider methods. */
  private void printClassDataProvider(final Object the_method, final JTypeDeclarationType the_decl)
  {
    
    Object obj = the_method;
    JFormalParameter[] parameters;
    String name;
    if (obj instanceof JConstructorDeclaration)
    {
      JConstructorDeclaration construct = (JConstructorDeclaration) obj;
      parameters = construct.parameters();
      name = construct.ident() + getCombinedName(parameters);

      for (int i = 0; i < parameters.length; i++)
      {
        printDataTypeMethod(parameters[i], name);
      }
      printCombinedIteratorMethod(parameters, name);
      printObjectIterator(the_decl);
      printObjectCombinedIterator(name);
    }
    else if (obj instanceof JMethodDeclaration)
    {
      JMethodDeclaration method = (JMethodDeclaration) obj;
      parameters = method.parameters();
      name = method.ident() + getCombinedName(parameters);

      for (int i = 0; i < parameters.length; i++)
      {
        printDataTypeMethod(parameters[i], name);
      }
      printCombinedIteratorMethod(parameters, name);
      printObjectIterator(the_decl);
      printObjectCombinedIterator(name);
    }
  
  }

  /**
   * This method print the individual method for each data type in the method
   * which returns the Iterator of the data type.
   * 
   * @param the_parameter
   * @param the_name
   */
  private void printDataTypeMethod(final JFormalParameter the_parameter, final String the_name)
  {
    writer.indent(4);
    writer.print("/**");
    writer.indent(4);
    writer.print(" * This method returns the Iterator for individual data type.");
    writer.indent(4);
    writer.print(" * @return Iterator");
    writer.indent(4);
    writer.print(" */");
    writer.indent(4);
    String parameter = the_parameter.typeToString();
    char c = Character.toUpperCase(parameter.charAt(0));
    parameter = parameter.replace(parameter.charAt(0), c);
    if (the_parameter.typeToString().equals("String[]"))
    {

      writer.print("public org.jmlspecs.jmlunit.strategies.IndefiniteIterator " + "StringArray" + "_" + the_name + "_" +
                   the_parameter.ident() + "()");
    }
    else if (the_parameter.typeToString().equals("String"))
    {
      writer.print("public org.jmlspecs.jmlunit.strategies.IndefiniteIterator " + "String" + "_" + the_name + "_" +
                   the_parameter.ident() + "()");
    }
    else
    {
      writer.print("public org.jmlspecs.jmlunit.strategies.IndefiniteIterator " +
                   the_parameter.typeToString() + "_" + the_name + "_" +
                   the_parameter.ident() + "()");
    }
    writer.indent(4);
    writer.print("{");
    writer.indent(6);
    if (the_parameter.typeToString().equals("String[]") ||
        the_parameter.typeToString().equals("String"))
    {

      if (the_parameter.typeToString().equals("String[]"))
      {
        writer.print("org.jmlspecs.jmlunit.strategies.StringStrategy " + the_parameter.ident() + "_" + "string" +
                     "_Strategy =" + " new org.jmlspecs.jmlunit.strategies.StringStrategy()");
      }
      else if (the_parameter.typeToString().equals("String"))
      {
        writer.print("org.jmlspecs.jmlunit.strategies.StringStrategy " + the_parameter.ident() + "_" + "string" +
                     "_Strategy =" + " new org.jmlspecs.jmlunit.strategies.StringStrategy()");
      }
      writer.indent(6);
      writer.print("{");
      writer.indent(8);
      writer.print("protected String[] addData()");
      writer.indent(8);
      writer.print("{");
      writer.indent(10);
      writer.print("return new String[] {/*Add strings separated by coma here for testing.*/};");
      writer.indent(8);
      writer.print("};");
      writer.indent(6);
      writer.print("};");
      
      writer.indent(4);
      writer.print("return " + the_parameter.ident() + "_" + "string" +
                   "_Strategy.iterator();");
    }
    else
    {
      writer.print("org.jmlspecs.jmlunit.strategies." + parameter + "StrategyType " +
                   the_parameter.ident() + "_" + the_parameter.typeToString() + "_Strategy =");
      writer.indent(8);
      writer.print("new org.jmlspecs.jmlunit.strategies." + parameter +
                   "Strategy()");
      writer.indent(6);
      writer.print("{");
      writer.indent(8);
      writer.print("protected " + the_parameter.typeToString() + "[] " + "addData()");
      writer.indent(8);
      writer.print("{");
      writer.indent(6);
      writer.print("return new " + the_parameter.typeToString() + "[] " +
                   "{/*You can add data elements here.*/};");
      writer.indent(8);
      writer.print("}");
      writer.indent(6);
      writer.print("};");
      writer.indent(4);
      writer.print("return  " + the_parameter.ident() + "_" + the_parameter.typeToString() +
                   "_Strategy.iterator();");
    }
    writer.indent(4);
    writer.print("}");
    writer.newLine(1);
  }

  /**
   * This method prints the combined iterator for the all data types.
   * 
   * @param the_parameters
   * @param the_name
   */
  private void printCombinedIteratorMethod(final JFormalParameter[] the_parameters,
                                           final String the_name)
  {
    writer.indent(4);
    writer.print("/**");
    writer.indent(4);
    writer.print(" * This method returns the combined Iterator of all data types.");
    writer.indent(4);
    writer.print(" * @return CombinedParameterIterator");
    writer.indent(4);
    writer.print(" */");
    writer.indent(4);
    writer.print("public CombinedParameterIterator params_" + the_name + "()");
    writer.indent(4);
    writer.print("{");
    writer.indent(6);
    writer.print("allParamIterator = new ArrayList<IndefiniteIterator>();");
    for (int i = 0; i < the_parameters.length; i++)
    {
      writer.indent(6);
      if (the_parameters[i].typeToString().equals("String[]"))
      {
        writer.print("allParamIterator.add(StringArray" + "_" +
                     the_name + "_" + the_parameters[i].ident() + "());");
      }
      else
      {
        writer.print("allParamIterator.add(" +
                     the_parameters[i].typeToString() + "_" + the_name + "_" +
                     the_parameters[i].ident() + "());");
      }
    }
    writer.indent(6);
    writer.print("combinedIt = new CombinedParameterIterator(allParamIterator);");
    writer.indent(6);
    writer.print("return combinedIt;");
    writer.indent(4);
    writer.print("}");
    writer.newLine(2);
  }

  /**
   * This method generates the name for all parameters together.
   * 
   * @param parameters
   * @return String
   */
  private String getCombinedName(JFormalParameter[] parameters)
  {
    StringBuilder name = new StringBuilder();
    for (int i = 0; i < parameters.length; i++)
    {
      if (parameters[i].typeToString().equals("String[]"))
      {
        name.append("_" + "StringArray");
      }
      else
      {
        name.append("_" + parameters[i].typeToString());
      }
    }
    return name.toString();
  }

  /**
   * This method prints the method to return the iterator of objects for given
   * class.
   */
  private void printObjectIterator(final JTypeDeclarationType the_decl)
  {
    ArrayList<JTypeDeclarationType> allMethods = the_decl.methods();
    
    ArrayList<JFormalParameter> parameters = new ArrayList<JFormalParameter>();
    for (int cnt = 0; cnt < allMethods.size(); cnt++)
    {
      if(allMethods.get(cnt) instanceof JConstructorDeclaration)
      {
        JConstructorDeclaration a_construct = (JConstructorDeclaration) allMethods.get(cnt) ;
        JFormalParameter[] params = a_construct.parameters();
        for(int i = 0; i < params.length; i++)
        {
          parameters.add(params[i]);
        }
      }
    }
      
    writer.indent(4);
    writer.print("/**");
    writer.indent(4);
    writer.print(" * This method returns the iterator of objects for test.");
    writer.indent(4);
    writer.print(" * @return Iterator.");
    writer.indent(4);
    writer.print("*/");
    writer.indent(4);
    writer.print("protected Iterator<Object> objects()");
    writer.indent(4);
    writer.print("{");
    writer.indent(6);
    writer.print("ArrayList<Object> objs = new ArrayList<Object>();");
    writer.indent(6);
    writer.print("int objectCount = 0;");
    writer.indent(6);
    writer.print("int numberOfObjects = 2;//change this number for more objects.");
    writer.indent(6);
    writer.print("while (objectCount < numberOfObjects)");
    writer.indent(6);
    writer.print("{");
    writer.indent(8);
    writer.printOnLine("objs.add(new " + classNm + "(");
    if(parameters.size() > 0)
    {
      for (int count = 0; count < parameters.size(); count++)
      {
        if (parameters.get(count).typeToString().equals("String") ||
            parameters.get(count).typeToString().equals("String[]"))
        {
          writer.printOnLine("null");
        }
        else
        {
          writer.printOnLine("0");
        }
        if (count < (parameters.size() - 1))
        {
          writer.printOnLine(",");
        }
          
      }
    }
    writer.printOnLine("));");
    writer.printOnLine("\n");
    writer.indent(8);
    writer.print("objectCount++;");
    writer.indent(6);
    writer.print("}");
  

    writer.indent(6);
    writer.print("return objs.iterator();");
    writer.indent(4);
    writer.print("}");
    writer.newLine(1);
  }

  /**
   * This method prints the actual data provider method which returns the array
   * Object[][].
   * 
   * @param the_name This is the String of class name.
   */
  private void printObjectCombinedIterator(final String the_name)
  {
    writer.indent(4);
    writer.print("/**");
    writer.indent(4);
    writer.print(" * This method returns the Data Provider Iterator.");
    writer.indent(4);
    writer.print(" * @return Iterator");
    writer.indent(4);
    writer.print(" */");
    writer.indent(4);
    writer.print("public Iterator<Object[]> getIter_" + the_name + "()");
    writer.indent(4);
    writer.print("{");
    writer.indent(6);
    writer.print("Iterator<Object> objectIt =  objects();");
    writer.indent(6);
    writer.print("CombinedParameterIterator combIt = params_" + the_name + "();");
    writer.indent(6);
    writer.print("CombinedObjectParameterIterator combObjParaIt =");
    writer.indent(8);
    writer.print("new CombinedObjectParameterIterator(combIt, objectIt);");
    writer.indent(6);
    writer.print("return (Iterator<Object[]>)combObjParaIt;");
    writer.indent(4);
    writer.print("}");
    writer.newLine(2);
  }

  /**
   * This method prints the CombinedIterator class
   * for each method to be tested.
   */
  private void printCombinedIteratorClass(final Iterator the_Iter, final JTypeDeclarationType the_decl)
  {
  
    while (the_Iter.hasNext())
    {
      Object obj = the_Iter.next();
  
      if (obj instanceof JMethodDeclaration)
      {
        JMethodDeclaration method = (JMethodDeclaration) obj;
  
        printDataProvider(method);
        writer.newLine(2);
        writer.indent(2);
        writer.print("/**");
        writer.indent(2);
        writer.print(" * This class is the CombinedIterator for method " + method.ident() +
                     ".");
        writer.indent(2);
        writer.print(" */");
        writer.indent(2);
        writer.print("private class CombinedIteratorFor" + method.ident());
        writer.indent(2);
        writer.print("{");
        writer.newLine(1);
        printDataMembers();
        writer.indent(4);
        writer.print("/** This is the constructor for CombinedIteratorFor" + 
                     method.ident() + ".*/" );
        writer.indent(4);
        writer.print("public CombinedIteratorFor" + method.ident() + "()");
        writer.indent(4);
        writer.print("{");
        writer.indent(4);
        writer.print("}");
        writer.newLine(2);
        printClassDataProvider(method, the_decl);
        writer.indent(2);
        writer.print("}");
        
      }
    }
  }
  
  /**
   * This method prints the data members of the class.
   */
  private void printDataMembers()
  {
    writer.indent(4);
    writer.print("/**");
    writer.indent(4);
    writer.print(" * This is the Iterator array of Iterators for all parameters.");
    writer.indent(4);
    writer.print(" */");
    writer.indent(4);
    writer.print("protected ArrayList<IndefiniteIterator> allParamIterator;");
    writer.newLine(1);
    writer.indent(4);
    writer.print("/**");
    writer.indent(4);
    writer.print(" * This is the CombinedParameterIterator i.e. array"
                 + " of Iterators for all parameters.");
    writer.indent(4);
    writer.print(" */");
    writer.indent(4);
    writer.print("protected CombinedParameterIterator combinedIt;");
    writer.newLine(1);
  }

  /**
   * This method prints the individual data provider. 
   */
  private void printDataProvider(final JMethodDeclaration the_method)
  {
   
    JFormalParameter[] parameters = the_method.parameters();
    String name = the_method.ident() + getCombinedName(parameters);
    writer.indent(2);
    writer.print("/**");
    writer.indent(2);
    writer.print(" * This is the actual data provider method used by TestNG..");
    writer.indent(2);
    writer.print(" * @return Iterator<Object[]>");
    writer.indent(2);
    writer.print(" */");
    writer.indent(2);
    writer.print("@DataProvider(name = \"test_" + name + "\")");
    writer.indent(2);
    writer.print("public Iterator<Object[]> test_" + name + "()");
    writer.indent(2);
    writer.print("{");
    writer.indent(4);
    writer.printOnLine("CombinedIteratorFor" + the_method.ident());
    writer.printOnLine(" combinedIt_" + the_method.ident());
    writer.printOnLine(" = new CombinedIteratorFor" + the_method.ident() + "();");
    writer.printOnLine("\n");
    writer.indent(4);
    writer.printOnLine("return combinedIt_" + the_method.ident());
    writer.printOnLine(".getIter_" + name + "();");
    writer.printOnLine("\n");
    writer.indent(2);
    writer.print("}");
   
  }
  /**
   * This method prints the end of class bracket "{".
   */
  private void printClassEnd()
  {
    writer.print("}");
  }
}
