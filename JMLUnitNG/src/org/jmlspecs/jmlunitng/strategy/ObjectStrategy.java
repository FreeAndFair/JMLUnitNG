/*
 * OpenJMLUnit
 * 
 * @author "Jonathan Hogins (jon.hogins@gmail.com)"
 * 
 * @module "OpenJML"
 * 
 * @creation_date "April 2010"
 * 
 * @last_updated_date "April 2010"
 * 
 * @keywords "unit testing", "JML"
 */

package org.jmlspecs.jmlunitng.strategy;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jmlspecs.jmlunitng.iterator.IteratorAdapter;
import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;

/**
 * Strategy for all non-primitive types. For Enums, it always
 * provides all values of the enum unless the default values are
 * overridden. For other types of object, it attempts to find
 * test data generators for the default values.
 * 
 * @author Jonathan Hogins
 * @author Daniel M. Zimmerman
 * @version June 2010
 */
public abstract class ObjectStrategy extends BasicStrategy {
  /**
   * The default values for this strategy.
   */
  private static final List<Object> DEFAULT_VALUES;
  static {
    final List<Object> defs = new ArrayList<Object>(1);
    defs.add(null);
    DEFAULT_VALUES = Collections.unmodifiableList(defs);
  }

  /**
   * The test data class found for the given strategy class.
   */
  private Class<? extends ObjectStrategy> my_test_data;

  /**
   * The enum constants for the given class, if it is an enum type.
   */
  private Object[] my_enum_constants; 
  
  /**
   * Creates a new ObjectStrategy for the given class. Default values will be
   * generated by the test data class for the_class if present.
   * 
   * @param the_class The class for which to use test data from.
   */
  @SuppressWarnings("unchecked")
  public ObjectStrategy(final Class<?> the_class) {
    if (the_class.getEnumConstants() == null) {
      // it's not an enum, so let's look for default values
      my_enum_constants = null;
      try {
        final Class<?> data_class = Class.forName(the_class.getName() + 
          "_JML_Test_Data$ClassObjectStrategy");
        if (ObjectStrategy.class.isAssignableFrom(data_class)) {
          my_test_data = (Class<? extends ObjectStrategy>) data_class;
        }
      } catch (ClassNotFoundException e) {
        my_test_data = null;
      }
    } else {
      // it is an enum
      my_enum_constants = the_class.getEnumConstants();
      my_test_data = null;
    }
  }

  /**
   * Returns an iterator over the values defined in the class' test data
   * definition if it exists. Otherwise, returns an iterator over
   * DEFAULT_VALUES.
   * 
   * @return An Iterator over default values.
   */
  public RepeatedAccessIterator<?> getDefaultValues() {
    RepeatedAccessIterator<?> result;
    
    if (my_enum_constants == null && my_test_data == null) {
      // return the default null iterator, since we couldn't get data
      result = new IteratorAdapter<Object>(DEFAULT_VALUES.iterator());
    } else if (my_enum_constants == null) {
      // try to return data generated using reflection
      try {
        result = my_test_data.newInstance().iterator();
      } catch (InstantiationException e) {
        e.printStackTrace();
        result = new IteratorAdapter<Object>(DEFAULT_VALUES.iterator());
      } catch (IllegalAccessException e) {
        e.printStackTrace();
        result = new IteratorAdapter<Object>(DEFAULT_VALUES.iterator());
      }
    } else { // my_enum_constants != null
      // return the enum constants
      result = new ObjectArrayIterator<Object>(my_enum_constants);
    }
   
    return result;
  }
}
