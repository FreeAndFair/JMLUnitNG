instanceDataProviderName() ::= "p_instance_only"
dataProviderName(method) ::= "p_<method.abbreviatedFormattedName>"

testClassName(classInfo) ::= "<classInfo.shortName><testClassSuffix()>"

testName(method) ::= <<
test_<if(method.static)>static_<endif><method.abbreviatedFormattedName>
>>

varJavaDocLine(arg) ::= <<
 * @param <arg:varName()> The <arg.type.shortName> to be passed.
>>

classVarJavaDocLine(arg) ::= <<
 * @param <arg:varName()> The <arg.type.shortName> instance to be tested.
>>

varDecList(list) ::= <<
<list:varDec(); separator=", ">
>>

varDec(arg) ::= "final <arg.type.fullyQualifiedName> <arg:varName()>"

varNameList(list) ::= <<
<list:varName(); separator=", ">
>>

varName(arg) ::= "<arg.name>"

type(paramInfo) ::= "<typeTransMap.(paramInfo.type.fullyQualifiedName)>"
rawtype(paramInfo) ::= "<paramInfo.type.fullyQualifiedName>"

baseStrategyMap ::= [
        "int":"IntStrategy",
        "long":"LongStrategy",
        "float":"FloatStrategy",
        "double":"DoubleStrategy",
        "boolean":"BooleanStrategy",
        "byte":"ByteStrategy",
        "short":"ShortStrategy",
        "char":"CharStrategy",
        "java.lang.String":"StringStrategy",
        default:"ObjectStrategy" // anything other than an atomic type
]

typeTransMap ::= [
        "int":"Integer",
        "long":"Long",
        "float":"Float",
        "double":"Double",
        "boolean":"Boolean",
        "byte":"Byte",
        "short":"Short",
        "char":"Character",
        default:key // anything other than an atomic type
]

testClassSuffix() ::= "_JML_Test"
strategyPackageSuffix() ::= "_JML_Data"
strategyPackageShortName(classInfo) ::= "<classInfo.shortName><strategyPackageSuffix()>"
strategyPackageName(classInfo) ::= "<if(classInfo.packaged)><classInfo.packageName>.<endif><strategyPackageShortName(classInfo=classInfo)>"
localStrategyName(classInfo, methodInfo, paramInfo) ::= "<if(!classInfo.packaged)><classInfo.fullyQualifiedName>_<endif><methodInfo.abbreviatedFormattedName>__<paramInfo.name>"
instanceStrategyName(classInfo) ::= "<classInfo.shortName>_InstanceStrategy"
classStrategyName(classInfo, typeInfo) ::= "<if(!classInfo.packaged)><classInfo.fullyQualifiedName>_<endif>ClassStrategy_<typeInfo.formattedName>"
packageStrategyName(typeInfo) ::= "PackageStrategy_<typeInfo.formattedName>"
generatedLine(versionString, dateString) ::= "<generatedString()> <versionString>, <dateString>."
generatedString() ::= "Generated by JMLUnitNG"
doNotModifyString() ::= "(do not modify this comment, it is used by JMLUnitNG clean-up routines)"
addDataClassLine(dataClass) ::= <<
addDataClass(<dataClass>);

>>
addLiteral(literal) ::= "<literal>, ";