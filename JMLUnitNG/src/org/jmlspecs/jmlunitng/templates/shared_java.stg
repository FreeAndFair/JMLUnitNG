group shared_java;

instanceDataProviderName() ::= "p_instance_only"
dataProviderName() ::= "p_<method.detailedName>"

testClassName(classInfo) ::= "<classInfo.shortName><testClassSuffix()>"

testName() ::= <<
test_<if(method.static)>static_<endif><method.detailedName>
>>

varJavaDocLine() ::= <<
 * @param <it:varName()> The <it.type.shortName> to be passed.
>>

classVarJavaDocLine() ::= <<
 * @param <it:varName()> The <it.type.shortName> instance to be tested.
>>

varDecList(list) ::= <<
<list:varDec(); separator=", ">
>>

varDec() ::= "final <it.type.fullyQualifiedName> <it:varName()><if(it.array)>[]<endif>"

varNameList(list) ::= <<
<list:varName(); separator=", ">
>>

varName() ::= "<it.name>"

type(paramInfo) ::= "<typeTransMap.(paramInfo.type.fullyQualifiedName)><if(paramInfo.array)>[]<endif>"
rawtype(paramInfo) ::= "<paramInfo.type.fullyQualifiedName><if(paramInfo.array)>[]<endif>"

baseStrategyMap ::= [
        "int":"IntStrategy",
        "long":"LongStrategy",
        "float":"FloatStrategy",
        "double":"DoubleStrategy",
        "boolean":"BooleanStrategy",
        "byte":"ByteStrategy",
        "short":"ShortStrategy",
        "char":"CharStrategy",
        "java.lang.String":"StringStrategy",
        default:"ObjectStrategy" // anything other than an atomic type
]

typeTransMap ::= [
        "int":"Integer",
        "long":"Long",
        "float":"Float",
        "double":"Double",
        "boolean":"Boolean",
        "byte":"Byte",
        "short":"Short",
        "char":"Character",
        default:key // anything other than an atomic type
]

testClassSuffix() ::= "_JML_Test"
strategyPackageSuffix() ::= "_JML_Data"
strategyPackageShortName(classInfo) ::= "<classInfo.shortName><strategyPackageSuffix()>"
strategyPackageName(classInfo) ::= "<if(classInfo.packaged)><classInfo.packageName>.<endif><strategyPackageShortName(classInfo=classInfo)>"
localStrategyName(classInfo, methodInfo, paramInfo) ::= "<if(!classInfo.packaged)><classInfo.fullyQualifiedName>_<endif><methodInfo.detailedName>__<paramInfo.name>"
localStrategyFillIn(typeInfo) ::= "{ /* add local-scope <typeInfo.fullyQualifiedName> values here */ }"
instanceStrategyName(classInfo) ::= "<if(!classInfo.packaged)><classInfo.fullyQualifiedName>_<endif>InstanceStrategy"
instanceStrategyFillIn(classInfo) ::= "{ /* add <classInfo.fullyQualifiedName> values here */ }"
classStrategyName(classInfo, typeInfo) ::= "<if(!classInfo.packaged)><classInfo.fullyQualifiedName>_<endif>ClassStrategy_<typeInfo.formattedName>"
classStrategyFillIn(typeInfo) ::= "{ /* add class-scope <typeInfo.fullyQualifiedName> values here */ }"
packageStrategyName(typeInfo) ::= "PackageStrategy_<typeInfo.formattedName>"
packageStrategyFillIn(typeInfo) ::= "{ /* add package-scope <typeInfo.fullyQualifiedName> values here */ }"
generatedLine(versionString, dateString) ::= "<generatedString()> <versionString>, <dateString>."
generatedString() ::= "Generated by JMLUnitNG"
doNotModifyString() ::= "(do not modify this comment, it is used by JMLUnitNG clean-up routines)"
addDataClassLine() ::= <<
addDataClass(<it.fullyQualifiedName>.class);

>>
