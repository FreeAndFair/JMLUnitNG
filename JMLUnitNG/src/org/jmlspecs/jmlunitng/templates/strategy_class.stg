group strategy_class : shared_java;

main(date, class, type, jmlunitng_version, use_reflection, children) ::= <<
/*
 * Test data strategy for <class.fullyQualifiedName>.
 *
 * <generatedLine(versionString=jmlunitng_version, dateString=date)>
 * <doNotModifyString()>
 */
<if(class.packaged)>

package <strategyPackageName(classInfo=class)>;

<endif>

import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;
<if(class.packaged)>
import <class.packageName>.<packageStrategyName(typeInfo=type)>;<endif>
 
/**
 * Test data strategy for <class.fullyQualifiedName>. Provides
 * class-scope test values for type <type.fullyQualifiedName>.
 * 
 * @author JMLUnitNG <jmlunitng_version>
 * @version <date>
 */
public abstract class <classStrategyName(classInfo=class, typeInfo=type)> 
  extends <packageStrategyName(typeInfo=type)> {
  /**
   * @return class-scope values for type <type.fullyQualifiedName>.
   */
  public RepeatedAccessIterator\<?\> getClassValues() {
    return new ObjectArrayIterator\<<typeTransMap.(type.fullyQualifiedName)>\>
    (new <typeTransMap.(type.fullyQualifiedName)>[] 
    <classStrategyFillIn(typeInfo=type)>);
  }
  <if(!type.primitive)>
  
  /**
   * Constructor. The use of reflection can be controlled here for method 
   * parameters of type <type.fullyQualifiedName>
   * in this class by changing the parameter to \<code\>setReflective\</code\>. 
   * In addition, the data classes used to generate such reflective
   * parameters can be changed by adding additional data class lines, or
   * by removing some of the generated ones. Note that lower-level 
   * strategies can override any behavior specified here by calling the
   * same control methods in their own constructors.
   *
   * @see ObjectStrategy#addDataClass(Class\<?\>)
   * @see ObjectStrategy#clearDataClasses()
   * @see ObjectStrategy#setReflective(boolean)
   */
  public <classStrategyName(classInfo=class, typeInfo=type)>() {
    super();
    setReflective(<if(use_reflection)>true<else>false<endif>);
    <if(children)>
    
    <children:addDataClassLine()><endif>  }
  <endif>
}

>>

