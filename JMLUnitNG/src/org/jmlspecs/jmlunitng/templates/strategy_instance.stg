import "shared_java.stg"

main(date, class, jmlunitng_version, use_reflection) ::= <<
/*
 * Test data strategy for <class.fullyQualifiedName>.
 *
 * <generatedLine(versionString=jmlunitng_version, dateString=date)>
 * <doNotModifyString()>
 */
 
<if(class.packaged)>
package <class.packageName>;

<endif>
import java.util.LinkedList;
import java.util.List;

import org.jmlspecs.jmlunitng.iterator.InstantiationIterator;
import org.jmlspecs.jmlunitng.iterator.IteratorAdapter;
import org.jmlspecs.jmlunitng.iterator.NonNullMultiIterator;
import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;
import org.jmlspecs.jmlunitng.strategy.ObjectStrategy;

/**
 * Test data strategy for <class.fullyQualifiedName>. Provides
 * instances of <class.fullyQualifiedName> for testing, using
 * parameters from constructor tests.
 * 
 * @author JMLUnitNG <jmlunitng_version>
 * @version <date>
 */
public class <instanceStrategyName(classInfo=class)> extends ObjectStrategy {
  /**
   * @return local-scope instances of <class.fullyQualifiedName>.
   */
  public RepeatedAccessIterator\<<class.shortName>\> localValues() {
    return new ObjectArrayIterator\<<class.shortName>\>
    (new <class.shortName>[]
     <instanceStrategyFillIn(classInfo=class)>);
  }
  
  /**
   * @return default instances of <class.fullyQualifiedName>, generated
   *  using constructor test parameters.
   */ 
  public RepeatedAccessIterator\<<class.shortName>\> defaultValues() {
    final List\<RepeatedAccessIterator\<<class.shortName>\>\> iters = 
      new LinkedList\<RepeatedAccessIterator\<<class.shortName>\>\>();

    // an instantiation iterator for the default constructor
    // (if there isn't one, it will fail silently)
    iters.add(new InstantiationIterator\<<class.shortName>\>
      (<class.shortName>.class, 
       new Class\<?\>[0], 
       new ObjectArrayIterator\<Object[]\>(new Object[][]{{}})));
    
    <class.methods:{n | <instanceStrategyConstructorData(method=n)>}>

    return new NonNullMultiIterator\<<class.shortName>\>(iters);
  }
  
  /**
   * Constructor. The boolean parameter to \<code\>setReflective\</code\>
   * determines whether or not reflection will be used to generate
   * test objects.
   *
   * @see setReflective(boolean)
   */
  public <instanceStrategyName(classInfo=class)>() {
    super(<class.shortName>.class);
    setReflective(<if(use_reflection)>true<else>false<endif>);
  }
}

>>

instanceStrategyConstructorData(method) ::= <<
<if(method.constructor)>
<if(method.parameters)>
// parameters for method <method>
iters.add(new InstantiationIterator\<<class.shortName>\>
  (<class.shortName>.class, 
   new Class\<?\>[]
   {<paramClasses(method)>},
   new IteratorAdapter\<Object[]\>
   (<testClassName(class)>.<dataProviderName(method)>())));

<endif>
<endif>
>>

paramClasses(method) ::= "<method.parameters:{n | <rawtype(paramInfo=n)>.class}; separator=\", \n    \">"
instanceStrategyFillIn(classInfo) ::= "{ /* add <classInfo.fullyQualifiedName> values here */ }"