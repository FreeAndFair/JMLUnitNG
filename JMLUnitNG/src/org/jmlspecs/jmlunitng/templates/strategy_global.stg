group strategy_global : shared_java;

main(date, class, type, jmlunitng_version, use_reflection, children) ::= <<
/*
 * Test data strategy for <class.fullyQualifiedName>.
 *
 * <generatedLine(versionString=jmlunitng_version, dateString=date)>
 * <doNotModifyString()>
 */
 <if(class.packaged)>

package <strategyPackageName(classInfo=class)>;

<endif>

import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;
import org.jmlspecs.jmlunitng.strategy.<baseStrategyMap.(type.fullyQualifiedName)>;
 
/**
 * Test data strategy for <class.fullyQualifiedName>. Provides
 * class-scope test values for type <type.fullyQualifiedName>.
 * 
 * @author JMLUnitNG <jmlunitng_version>
 * @version <date>
 */
public abstract class <globalStrategyName(typeInfo=type)> 
  extends <baseStrategyMap.(type.fullyQualifiedName)> {
  /**
   * @return class-scope values for type <type.fullyQualifiedName>.
   */
  public RepeatedAccessIterator\<?\> getClassValues() {
    return new ObjectArrayIterator\<<typeTransMap.(type.fullyQualifiedName)>\>
    (new <typeTransMap.(type.fullyQualifiedName)>[] 
    <globalStrategyFillIn(typeInfo=type)>);
  }
  
  /**
   * temporary until I figure out the right way to deal with this
   */
  public RepeatedAccessIterator\<?\> getPackageValues() {
    return new ObjectArrayIterator\<<typeTransMap.(type.fullyQualifiedName)>\>
    (new <typeTransMap.(type.fullyQualifiedName)>[]{});
  }
  <if(!type.primitive)>
  
  /**
   * Constructor.
   */
  public <globalStrategyName(typeInfo=type)>() {
    super(<type.fullyQualifiedName>.class, <if(use_reflection)>true<else>false<endif>);
    <if(children)>
    
    <children:addDataClassLine()><endif>  }
  <endif>
}

>>

addDataClassLine() ::= <<
addDataClass(<it.fullyQualifiedName>.class);

>>

