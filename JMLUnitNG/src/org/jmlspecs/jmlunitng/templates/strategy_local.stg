group strategy_local : shared_java;

main(date, class, method, param, jmlunitng_version, use_reflection, children) ::= <<
/*
 * Test data strategy for <class.fullyQualifiedName>.
 *
 * <generatedLine(versionString=jmlunitng_version, dateString=date)>
 * <doNotModifyString()>
 */

<if(class.packaged)> 
package <strategyPackageName(classInfo=class)>;

<endif>
import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;

/**
 * Test data strategy for <class.fullyQualifiedName>. Provides
 * test values for parameter "<param.type.shortName> <param.name>" of method
 * "<method>". 
 * 
 * @author JMLUnitNG <jmlunitng_version>
 * @version <date>
 */
public class <localStrategyName(classInfo=class, methodInfo=method, paramInfo=param)>
  extends <classStrategyName(classInfo=class, typeInfo=param.type)> {
  /**
   * @return local-scope values for parameter 
   *  "<param.type.shortName> <param.name>".
   */
  public RepeatedAccessIterator\<?\> getLocalValues() {
  	return new ObjectArrayIterator\<<type(paramInfo=param)>\>
  	(new <type(paramInfo=param)>[] 
  	<localStrategyFillIn(typeInfo=param.type)>);
  }
  <if(!param.type.primitive)>
  
  /**
   * Constructor. The use of reflection can be controlled here for parameter
   * "<param.type.shortName> <param.name>" of method "<method>" by 
   * changing the parameter to \<code\>setReflective\</code\>. In addition,
   * the data classes used to generate such reflective parameters can be 
   * changed by adding additional data class lines, or by removing some of 
   * the generated ones. Since this is the lowest level of strategy, the 
   * behavior will be exactly as you specify here if you clear the existing 
   * list of classes.
   *
   * @see ObjectStrategy#addDataClass(Class\<?\>)
   * @see ObjectStrategy#clearDataClasses()
   * @see ObjectStrategy#setReflective(boolean)
   */
  public <localStrategyName(classInfo=class, methodInfo=method, paramInfo=param)>() {
    super();
    setReflective(<if(use_reflection)>true<else>false<endif>);
    <if(children)>
    
    <children:addDataClassLine()><endif>  }
  <endif>
}

>>
