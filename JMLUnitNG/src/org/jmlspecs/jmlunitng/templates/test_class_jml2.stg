group test_class_jml4 : shared_java;

main(date, class, methods, package_name, packaged, jmlunitng_version) ::= <<
/*
 * Test Oracle Class for <class.fullyQualifiedName>
 * For Use With JML2 RAC
 *
 * <generatedLine(versionString=jmlunitng_version, dateString=date)>
 * <doNotModifyString()>
 */
 
<if (packaged)>
package <package_name>;

<endif>

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;

import org.jmlspecs.jmlunitng.iterator.IteratorWrapper;
import org.jmlspecs.jmlunitng.iterator.ParameterArrayIterator;
import org.jmlspecs.jmlunitng.testng.BasicTestListener;
import org.jmlspecs.jmlunitng.testng.PreconditionSkipException;
import org.testng.Assert;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.xml.XmlSuite;

import org.jmlspecs.jmlrac.runtime.JMLAssertionError;
import org.jmlspecs.jmlrac.runtime.JMLChecker;
import org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError;
import org.jmlspecs.jmlrac.runtime.JMLEvaluationError;

<if (packaged)>
import <strategyPackageName(classInfo=class)>.*;

<endif>

/**
 * Test oracles generated by JMLUnitNG for JML4 RAC of class
 * <class.fullyQualifiedName>.
 * 
 * @author JMLUnitNG <jmlunitng_version>
 * @version <date>
 */
 
public class <testClassName(class)> {
  /**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
  public static void main(String[] the_args) {
    final TestNG testng_runner = new TestNG();
    final Class\<?\>[] classes = {<testClassName(class)>.class};
    final BasicTestListener listener =
      new BasicTestListener(new PrintWriter(System.out));
    testng_runner.setUseDefaultListeners(false);
    testng_runner.setXmlSuites(new ArrayList\<XmlSuite\>());
    testng_runner.setTestClasses(classes);
    testng_runner.addListener(listener);
    testng_runner.run();
  }
  
  /** 
   * A test to ensure that RAC is enabled before running other tests.
   */
  @Test
  public void test_racEnabled() {
    Assert.assertTrue
    (JMLChecker.isRACCompiled(<class.shortName>.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");
  } 
  
  <methods:methodTest(); separator="\n">
  <methods:methodProvider(); separator="\n">
  <if(!class.abstract)>
  <instanceDataProvider()>
  <endif>
}
>>

methodTest(method) ::= <<
/**
 * A test for <if(method.constructor)>a constructor<else>method <method.name><endif>.<if(!method.constructor)>
 
 * @param the_test_object The <method.enclosingClass.shortName> to call the test method on.
<endif>

<method.parameters:varJavaDocLine(); separator="\n">
 */
<if(method.parameters)>
@Test(dependsOnMethods = { "test_racEnabled" }, 
      dataProvider = "<dataProviderName()>")

<else>
<if(!method.constructor)>
<if(!method.static)>
@Test(dependsOnMethods = { "test_racEnabled" }, 
      dataProvider = "<instanceDataProviderName()>")

<else>
@Test(dependsOnMethods = { "test_racEnabled" })

<endif>
<else>
@Test(dependsOnMethods = { "test_racEnabled" })

<endif>
<endif>
public void <testName()>
(<if(!method.constructor)><if(!method.static)>final <method.enclosingClass.shortName> the_test_object<if(method.parameters)>, 
<endif><endif><endif><varDecList(method.parameters)>) {
  <if(!method.constructor)><if(!method.static)>
  if (the_test_object == null) {
    throw new PreconditionSkipException
    ("could not construct an object to test");
  }
  <endif><endif>
  try {
    <if(method.constructor)>
    new <method.name>(<varNameList(method.parameters)>);
    <else><if(method.static)>
    <method.enclosingClass.shortName>.<method.name>(<varNameList(method.parameters)>);
    <else>
    the_test_object.<method.name>(<varNameList(method.parameters)>);
    <endif><endif>
  }
  <if(method.signals)>
  <method.signals:catchClause()><endif>  catch (final JMLEntryPreconditionError e) {
    // meaningless test
    throw new PreconditionSkipException(e.getMessage());
  }
  catch (final JMLEvaluationError e) {
    if (e.getCause() instanceof JMLEntryPreconditionError) {
      // meaningless test
      throw new PreconditionSkipException(e.getCause().getMessage());
    } else {
      // failed test
      throw new TestException(e.getCause().getMessage());
    }
  }
  catch (final JMLAssertionError e) {
    // test failure
    throw new TestException(e.getMessage());
  }
  catch (final Throwable e) {
    // test failure for some reason other than assertion violation
    throw new TestException(e.getMessage());
  }
}

>>

methodProvider(method) ::= <<
<if(method.parameters)>/**
 * Data provider for <if(method.constructor)>constructor<else>method<endif> <method>.
 * @return An iterator over strategies to use for parameter generation.
 */
@SuppressWarnings({"unchecked"})
@DataProvider(name = "<dataProviderName()>")
public static Iterator\<Object[]\> <dataProviderName()>() {
  return new IteratorWrapper\<Object[]\>
  (new ParameterArrayIterator
       (<if(!method.constructor)><if(!method.static)><instanceStrategyName(classInfo=class)>.class, 

        <endif><endif><method.parameters:{<localStrategyName(classInfo=class, methodInfo=method, paramInfo=it)>.class}; separator=", 
">));
}

<endif>

>>

instanceDataProvider() ::= <<
/**
 * Data provider for methods with no parameters.
 * @return An iterator over the main class strategy.
 */
@SuppressWarnings({"unchecked"})
@DataProvider(name = "<instanceDataProviderName()>")
public static Iterator\<Object[]\> <instanceDataProviderName()>() {
  return new IteratorWrapper\<Object[]\>
  (new ParameterArrayIterator(<instanceStrategyName(classInfo=class)>.class));
}
>>

catchClause() ::= <<
catch (final <it.fullyQualifiedName> e) {
  // passed test because of successful signals clause
  return;
}

>>