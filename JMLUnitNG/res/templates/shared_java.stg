group shared_java;

classOnlyDataProviderName() ::= "p_class_only"
dataProviderName() ::= "p_<method.detailedName>"

testClassName(classInfo) ::= "<classInfo.shortName>_JML_Test"

testName() ::= <<
test_<method.detailedName>
>>

varJavaDocLine() ::= <<
 * @param <it:varName()> The <it.type.shortName> to be passed.
>>

classVarJavaDocLine() ::= <<
 * @param <it:varName()> The <it.type.shortName> instance to be tested.
>>

varDecList(list) ::= <<
<list:varDec(); separator=", ">
>>

varDec() ::= "final <it.type.fullyQualifiedName> <it:varName()><if(it.array)>[]<endif>"

varNameList(list) ::= <<
<list:varName(); separator=", ">
>>

varName() ::= "<it.name>"

type(paramInfo) ::= "<typeTransMap.(paramInfo.type.fullyQualifiedName)><if(paramInfo.array)>[]<endif>"
rawtype(paramInfo) ::= "<paramInfo.type.fullyQualifiedName><if(paramInfo.array)>[]<endif>"

baseStrategyMap ::= [
        "int":"IntStrategy",
        "long":"LongStrategy",
        "float":"FloatStrategy",
        "double":"DoubleStrategy",
        "boolean":"BooleanStrategy",
        "byte":"ByteStrategy",
        "short":"ShortStrategy",
        "char":"CharStrategy",
        "java.lang.String":"StringStrategy",
        default:"ObjectStrategy" // anything other than an atomic type
]

typeTransMap ::= [
        "int":"Integer",
        "long":"Long",
        "float":"Float",
        "double":"Double",
        "boolean":"Boolean",
        "byte":"Byte",
        "short":"Short",
        "char":"Character",
        default:key // anything other than an atomic type
]

strategyPackageName(classInfo) ::= "<classInfo.shortName>_JML_Data"
strategyName(methodInfo, paramInfo) ::= "<methodInfo.detailedName>__<paramInfo.name>"
classStrategyName() ::= "ClassObjectStrategy"
globalStrategyName(typeName) ::= "GlobalStrategy_<typeName>"