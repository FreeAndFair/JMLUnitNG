group test_class_java : shared_java;

main(date, class, methods, packageName, packaged) ::= <<
/*
 * Test Oracle Class for <class.fullyQualifiedName>
 * Generated by JMLUnitNG on <date>
 */
 
<if (packaged)>
package <packageName>;
<endif>

import java.io.PrintWriter;

import org.jmlspecs.jmlunitng.testng.BasicTestListener;
import org.jmlspecs.jmlunitng.testng.PreconditionSkipException;
import org.testng.Assert;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.Test;

import org.jmlspecs.jml4.rac.runtime.JMLAssertionError;
import org.jmlspecs.jml4.rac.runtime.JMLChecker;
import org.jmlspecs.jml4.rac.runtime.JMLEntryPreconditionError;
import org.jmlspecs.jml4.rac.runtime.JMLEvaluationError;

/**
 * Test oracles generated by JMLUnitNG for class
 * <class.fullyQualifiedName>.
 * 
 * @author JMLUnitNG
 * @version <date>
 */
 
public class <testClassName(class)> extends <dataClassName(class)> {

  /** Constructs the class object. */
  public <testClassName(class)>() {
  }
  
  /** This is the main method to run the test. */
  public static void main(String[] args) {
    final TestNG my_test1 = new TestNG();
    final Class\<?\>[] classes = {<testClassName(class)>.class};
    final BasicTestListener listener = new BasicTestListener(new PrintWriter(System.out));
    my_test1.setTestClasses(classes);
    my_test1.addListener(listener);
    my_test1.run();
  }
  
  /** Checks to see if RAC is enabled. */
  @Test
  public void test_racEnabled() {
    Assert.assertTrue
    (JMLChecker.isRACCompiled
      (<class.fullyQualifiedName>.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");
  } 
  
  <methods:methodTest(); separator="\n">
}
>>

methodTest(method) ::= <<
/**
 * This method is a test for <if(method.constructor)>a constructor<else>method <method.name><endif> from the class to be
 * tested.<if(!method.constructor)>
 
 * @param the_test_object The <method.declaringClass.shortName> to call the test method on.
<endif>

<method.parameterTypes:varJavaDocLine(); separator="\n">
 */
<if(method.parameterTypes)>
@Test(dependsOnMethods = { "test_racEnabled" }, dataProvider = "<dataProviderName()>")

<else>
<if(!method.constructor)>
@Test(dependsOnMethods = { "test_racEnabled" }, dataProvider = "<classOnlyDataProviderName()>")

<else>
@Test(dependsOnMethods = { "test_racEnabled" })

<endif>
<endif>
public void <testName()>(<if(!method.constructor)>final <method.declaringClass.fullyQualifiedName> the_test_object<if(method.parameterTypes)>, <endif><endif><varDecList(method.parameterTypes)>) {
  <if(!method.constructor)>
  if (the_test_object == null) {
    throw new PreconditionSkipException("could not construct an object");
  }
  <endif>
  try {
    <if(method.constructor)>
    new <method.name>(<varNameList(method.parameterTypes)>);
    <else>
    the_test_object.<method.name>(<varNameList(method.parameterTypes)>);
    <endif>
  }
  catch (final JMLEntryPreconditionError the_exp) {
    // meaningless test
    throw new PreconditionSkipException(the_exp.getMessage());
  }
  catch (final JMLEvaluationError the_exp) {
    if (the_exp.getCause() instanceof JMLEntryPreconditionError) {
      // meaningless test
      throw new PreconditionSkipException(the_exp.getCause().getMessage());
    } else {
      // failed test
      throw new TestException(the_exp.getCause().getMessage());
    }
  }
  catch (final JMLAssertionError the_exp) {
    // test failure
    throw new TestException(the_exp.getMessage());
  }
  catch (final Exception the_exp) {
    // test failure for some reason other than assertion violation
    throw new TestException(the_exp.getMessage());
  }
}

>>