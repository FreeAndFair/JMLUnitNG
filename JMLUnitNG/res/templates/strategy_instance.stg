group strategy_instance : shared_java;

main(date, class, jmlunitng_version, use_reflection) ::= <<
/*
 * Test data strategy for <class.fullyQualifiedName>.
 * Generated by JMLUnitNG <jmlunitng_version>, <date>.
 */
 
package <strategyPackageName(classInfo=class)>;

import java.util.LinkedList;
import java.util.List;

import org.jmlspecs.jmlunitng.iterator.InstantiationIterator;
import org.jmlspecs.jmlunitng.iterator.IteratorAdapter;
import org.jmlspecs.jmlunitng.iterator.NonNullMultiIterator;
import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;
import org.jmlspecs.jmlunitng.strategy.ObjectStrategy;
 
import <class.fullyQualifiedName>;
import <class.packageName>.<testClassName(class)>;

/**
 * Test data strategy for <class.fullyQualifiedName>. Provides
 * instances of <class.fullyQualifiedName> for testing, using
 * parameters from constructor tests.
 * 
 * @author JMLUnitNG <jmlunitng_version>
 * @version <date>
 */
public class <instanceStrategyName()> extends ObjectStrategy {
  /**
   * @return custom instances of <class.fullyQualifiedName>.
   */
  public RepeatedAccessIterator\<<class.shortName>\> getCustomValues() {
    return new ObjectArrayIterator\<<class.shortName>\>
    (new <class.shortName>[]
     { /* add custom <class.fullyQualifiedName> values here */ });
  }
  
  /**
   * @return default instances of <class.fullyQualifiedName>, generated
   *  using constructor test parameters.
   */ 
  public RepeatedAccessIterator\<<class.shortName>\> getDefaultValues() {
    final List\<RepeatedAccessIterator\<<class.shortName>\>\> iters = 
      new LinkedList\<RepeatedAccessIterator\<<class.shortName>\>\>();
    
    // always add an instantiation iterator for the empty constructor
    iters.add(new InstantiationIterator\<<class.shortName>\>
      (<class.shortName>.class, 
       new Class\<?\>[0], 
       new ObjectArrayIterator\<Object[]\>(new Object[][]{{}})));
    
    <class.methods:{<instanceStrategyConstructorData(method=it)>}>
    return new NonNullMultiIterator\<<class.shortName>\>(iters);
  }
  
  /**
   * Constructor. 
   */
  public <instanceStrategyName()>() {
    // the boolean parameter in this call controls the use of reflection
    super(<class.shortName>.class, <if(use_reflection)>true<else>false<endif>);
  }
}

>>

instanceStrategyConstructorData(method) ::= <<
<if(method.constructor)>
<if(method.parameters)>
// parameters for method <method>
iters.add(new InstantiationIterator\<<class.shortName>\>
  (<class.shortName>.class, 
   new Class\<?\>[]
   {<paramClasses()>},
   new IteratorAdapter\<Object[]\>
   (<testClassName(class)>.<dataProviderName()>())));

<endif>
<endif>
>>

paramClasses() ::= "<method.parameters:{<rawtype(paramInfo=it)>.class}; separator=\", 
    \">"
