-- OpenJMLUnit
-- Copyright (C) 2010 Daniel M. Zimmerman

-- ===================================================================
-- Built-in BON types
-- ===================================================================

class_chart TUPLE
end

class_chart BOOLEAN
end

class_chart VALUE
end

class_chart INTEGER
end

class_chart REAL
end

class_chart STRING
end

class_chart SEQUENCE
end

class_chart SET
end

class_chart BAG
end

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- CLOPS cluster classes
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class_chart OPENJMLUNIT_OPTIONS_INTERFACE
end

class_chart OPENJMLUNIT_OPTIONS_STORE
end

class_chart OPENJMLUNIT_PARSER
end

class_chart OPENJMLUNIT_RULE_STORE
end

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- GENERATOR cluster classes
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class_chart TYPE_INFO
  query
    "What is the unqualified class name?",
    "What is the fully qualified class name?",
    "What is the package name?",
    "What is the generic component of this type?",
    "Is a primitive type?"
end

class_chart PARAMETER_INFO
  query
    "What is the parameter name?",
    "Is this parameter an array?"
end

class_chart CLASS_INFO
  query
    "What is the protection level?",
    "What is the info for the class's Superclass?",
    "Is the class abstract?",
    "What are the constructors?",
    "What are the factory methods?",
    "What are the non-factory static methods?",
    "What are the inherited instance methods?",
    "What are the non-inherited instance methods?",
    "What are the testable methods?"
  command
    "You represent class the_class!"
  constraint
    "The name is non-null and non-empty.",
    "The protection level is a valid Java protection level.",
    "The info for the parent class is null if and only if the class \
   \ is 'java.lang.Object'.",
    "There is at least one constructor."
end

class_chart INFO_FACTORY
  command
    "Create a CLASS_INFO object for the given JCTree!",
    "Create a CLASS_INFO object for the given Class!",
    "Create a List<METHOD_INFO> objects for the given JCTree!",
    "Create a METHOD_INFO object for the given MethodSymbol and parent class!",
    "Create a PARAMETER_INFO object for the given VarSymbol!"
end

class_chart METHOD_INFO
  query
    "What is the method name?",
    "What is the info for the class the method belongs to?",
    "What is the info for the class the method is declared in?",
    "What is the protection level?",
    "What are the parameter types?",
    "What is the return type?",
    "Is the method a constructor?",
    "Is the method a factory?",
    "Is the method static?",
    "Is the method testable?",
    "Is the method inherited?"
  command
    "You represent method the_method!"
  constraint
    "The classes the method belongs to and is declared in are non-null.",
    "The method name is non-null and non-empty.",
    "The protection level is a valid Java protection level.",
    "The return type is null if and only if the Java return type is 'void'.",
    "A method cannot be both a constructor and static.",
    "A method is a factory if and only if it is static and its return type is\
   \ the same as the class it belongs to or an abstract parent class thereof.",
    "A method is testable if and only if it a) is not a constructor of an\
    \ abstract class, b)has a non-private protection level, and c) is not (and\
    \ does not override) one of the following methods from java.lang.Object:\
    \ finalize, getClass, notify, notifyAll, wait.",
    "A method is inherited if and only if the class it belongs to and the class\
   \ in which it is declared are different classes."
end

class_chart SOURCE_WRITER
  query
    "What is the current indent level?"
  command
    "Write this line of code!",
    "Write this code without going on to the next line!",
    "Change the indent level to the_new_level!",
    "Increase the indent level by 1!",
    "Decrease the indent level by 1!",
    "Start a Java block!",
    "End the current Java block!",
    "Start a Javadoc block!",
    "End the current Javadoc block!"
  constraint
    "The indent level is at least 0.",
    "A Java block cannot be started inside a Javadoc block.",
    "A Java block cannot be ended if one is not in progress.",
    "A Java block cannot be ended if a Javadoc block is in progress.",
    "A Javadoc block cannot be ended if one is not in progress."
end

class_chart TEST_CLASS_GENERATOR
  query
  	"Are tests generated for inherited methods?",
  	"Are tests generated for deprecated methods?",
  	"Is reflection used in test data generation?"
  command
    "Use/don't use reflective test data generation!",
    "Generate tests for methods of protection level at most the_level!",
    "Generate tests for inherited methods!",
    "Generate tests for deprecated methods!",
    "Generate a test class for the_class and write it to the_writer!",
    "Generate a test data class for the_class and write it to the_writer!",
    "Generate both a test class and a test data class for the_class and write it to the_test_writer and the_data_writer, respectively!",
    "Generate test data for methods of protection level at most the_level!"
  constraint
    "The specified protection level must be a valid Java protection level."
end

class_chart TEST_DATA_CLASS_GENERATOR
  command
    "Generate test data of classes the_gen_classes for parameters of class the_param_class!",
    "Generate a test data class for the_class and write it to the_writer!"
  constraint
    "The class for which test data will be generated must exist.",
    "The specified protection level must be a valid Java protection level."
end
 
class_chart XML_GENERATOR
  command
    "Write a TestNG XML test for the_class to the_writer!",
    "Write a TestNG XML test for the_classes to the_writer!"
end

class_chart STRING_TEMPATE_UTIL
  query
  	"Has StringTemplate been initialized?"
  command
  	"Initialize StringTemplate!"
end
    
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- STRATEGY cluster classes
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class_chart BASIC_STRATEGY
  query
    "What is your default set of values?",
    "What is your custom set of values?",
    "What is your global set of values?",
    "What is an iterator over all your sets of values?"
  constraint
    "The iterator over all sets of values must have a finite number of elements."
end

class_chart BOOLEAN_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'boolean'."
end

class_chart BYTE_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'byte'."
end

class_chart CHAR_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'char'."
end

class_chart DOUBLE_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'double'."
end

class_chart FLOAT_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'float'."
end

class_chart INT_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'int'."
end

class_chart LONG_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'long'."
end

class_chart OBJECT_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'Object'."
end

class_chart SHORT_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'short'."
end

class_chart STRING_STRATEGY
  constraint
    "All values in all sets of values are assignable to Java type 'String'."
end

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- ITERATORS cluster classes
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class_chart ITERATOR_ADAPTER
  inherit REPEATED_ACCESS_ITERATOR
  command 
    "Embed the_java_util_iterator into a repeated access iterator!"
  constraint
    "The embedded iterator must be non-null."
end 

class_chart MULTI_ITERATOR
  inherit REPEATED_ACCESS_ITERATOR
  command
    "Embed the_list_of_iterators into a single iterator!"
  constraint
    "The sequence of elements returned is exactly the concatenation of\
   \ the sequences of elements returned by the iterators in the iterator\
   \ list, in the order they appear in the list."
end

class_chart PARAMETER_ARRAY_ITERATOR
  inherit REPEATED_ACCESS_ITERATOR
  command
    "Use the_strategy_classes to generate parameter arrays!"
  constraint
    "The sequence of elements returned consists of arrays of objects, where\
   \ each object is generated by using an iterator provided by the Strategy\
   \ class in the corresponding position of the list."
end

class_chart OBJECT_ARRAY_ITERATOR
  inherit REPEATED_ACCESS_ITERATOR
  command
    "Iterate over the_array!"
  constraint
    "The sequence of elements returned consists of Objects in the given array in order."
end

class_chart REPEATED_ACCESS_ITERATOR
  query
    "Is the current element valid?",
    "What is the current element of the iterator?"
  command
    "Advance the iterator to the next element!"
  constraint
    "The iterator cannot be advanced if it is past the end of the sequence."
end

class_chart ITERATOR_WRAPPER
  query
    "Does the iterator have any elements remaining?"
  command
  	"Retrieve the next element!",
  	"Remove the last element!"
end

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- TESTNG cluster classes
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class_chart BASIC_TEST_LISTENER
  inherit MINIMAL_TEST_LISTENER
  constraint
    "When a test status is reported, the name of the method being tested and\
   \ parameter information is reported to disk with the status."
end

class_chart FULL_TEST_LISTENER
  inherit MINIMAL_TEST_LISTENER
  constraint
    "When a test status is reported, full information about the test is written\
   \ to disk."
end

class_chart MINIMAL_TEST_LISTENER
  query
    "How many tests failed?",
    "How many tests passed?",
    "How many tests were skipped?"
  command
    "Test the_test failed!",
    "Test the_test passed!",
    "Test the_test was skipped!"  
end

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- TOOL cluster classes
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class_chart MAIN
  command
    "Run the tool with this command line!"
end
