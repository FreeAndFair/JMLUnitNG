group test_data_class_java : shared_java;

main(date, class, methods, types, packageName) ::= <<
// This class was generated by OpenJMLUnit on <date>
package <packageName>;

import java.util.Collections;
import java.util.Iterator;

import org.jmlspecs.openjmlunit.iterator.ObjectArrayIterator;
import org.jmlspecs.openjmlunit.strategy.*;

import org.testng.annotations.DataProvider;

/**
 * This class is the data provider class generated by the OpenJMLUnit testing
 * framework for class <class.fullyQualifiedName>.
 * 
 * @version 1.0
 * @author OpenJMLUnit.
 */
public class <dataClassName(class)> {
  /** Constructs the class object. */
  public <dataClassName(class)>() {
  }

  /**
   * For user definition: Instances of <class.fullyQualifiedName> on which to call methods under test.
   */
  public static abstract class <classStrategyName(class)> extends BasicStrategy {
    public Iterator\<?\> getGlobalValues() {
      /* To be implemented */
    }
    public Iterator\<?\> getCustomValues() {
      return Collections.EMPTY_LIST.iterator();
    }
  }
  
  <types:typeData(); separator="\n">
  
  <methods:methodData()>
  
  <methods:methodProvider()>
  
}
>>

typeData() ::= <<
/**
 * For user definition: Values of type <it.fullyQualifiedName> to be tested on each matching parameter.
 */
public static abstract class <it.formattedName>_GlobalStrategy extends BasicStrategy {
  public Iterator\<?\> getGlobalValues() {
  	/* To be implemented */
  }
}
>>

methodData(method) ::= <<
<it.parameterTypes:paramData(methodName=method.name); separator="\n">
>>

paramData(methodName) ::= <<
/**
 * For user definition: Supplier of test values for variable <it:varName()> in method <methodName>.
 */
public static abstract class <strategyName(methodNameStr=methodName, paramName=it:varName())> extends <globalStrategyName(typeName=it.formattedName)> {
  public Iterator\<?\> getCustomValues() {
  	/* To be implemented */
  }
}
>>

methodProvider(method) ::= <<
<if(method.parameterTypes)>/**
 * Data provider for method <method.name>.
 * @return An iterator over strategies to use for parameter generation.
 */
@SuppressWarnings({"unchecked"})
@DataProvider(name = "<dataProviderName(name=method.name, params=method.parameterTypes)>")
public Iterator\<Object[]\> <dataProviderName(name=method.name, params=method.parameterTypes)>() {
  return new ObjectArrayIterator(<classStrategyName(class)>.class, <method.parameterTypes:{<strategyName(methodNameStr=method.name, paramName=it:varName())>.class}; wrap="\n    ", separator=", ">);
}
<endif>
>>

strategyName(methodNameStr, paramName) ::= "<methodNameStr>_<paramName>_Strategy"
classStrategyName(class) ::= "<class.shortName>ClassStrategy"
globalStrategyName(typeName) ::= "<it.formattedName>_GlobalStrategy"