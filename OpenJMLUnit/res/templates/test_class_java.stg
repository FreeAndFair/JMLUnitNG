group test_class_java : shared_java;

main(date, class, methods, packageName) ::= <<
// This class was generated by OpenJMLUnit on <date>
package <packageName>;

import java.io.PrintWriter;

import org.jmlspecs.openjmlunit.testng.BasicTestListener;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.Test;

//Commented until JMLEntryPreconditionError is implemented in OpenJML
//import org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError;
import org.jmlspecs.utils.Utils.JmlAssertionError;

/**
 * This class is the test oracle generated by the OpenJMLUnit testing framework for
 * class <class.fullyQualifiedName>.
 * 
 * @version 1.0
 * @author OpenJMLUnit.
 */
 
public class <testClassName(class)> extends <dataClassName(class)> {

  /** Constructs the class object. */
  public <testClassName(class)>() {
  }
  
  /** This is the main method to run the test. */
  public static void main(String[] args) {
    final TestNG my_test1 = new TestNG();
    final Class\<?\>[] classes = {<testClassName(class)>.class};
    final BasicTestListener listener = new BasicTestListener(new PrintWriter(System.out));
    my_test1.setTestClasses(classes);
    my_test1.addListener(listener);
    my_test1.run();
  }
  
  <methods:methodTest(); separator="\n">
}
>>

methodTest() ::= <<
/**
 * This method is a test for <if(it.constructor)>a constructor<else>method <it.name><endif> from the class to be
 * tested.<if(!it.constructor)>
 
 * @param the_test_object The <it.declaringClass.shortName> to call the test method on.
<endif>

<it.parameterTypes:varJavaDocLine(); separator="\n">
 */
@Test(dataProvider = "<if(it.parameterTypes)><dataProviderName(name=it.name, params=it.parameterTypes)><else><classOnlyDataProviderName()><endif>")
public void <testName(name=it.name, params=it.parameterTypes)>(<if(!it.constructor)>final <it.declaringClass.fullyQualifiedName> the_test_object<if(it.parameterTypes)>, <endif><endif><varDecList(it.parameterTypes)>) {
  try {
    <if(it.constructor)>
    new <it.name>(<varNameList(it.parameterTypes)>);
    <else>
    the_test_object.<it.name>(<varNameList(it.parameterTypes)>);
    <endif>
  }
  //Commented until JMLEntryPreconditionError is implemented in OpenJML
  //catch (final JMLEntryPreconditionError the_exp) {
  //  // meaningless test
  //  throw new PreconditionSkipException(the_exp.getMessage());
  //}
  catch (final JmlAssertionError the_exp) {
    // test failure
    throw new TestException(the_exp.getMessage());
  }
  catch (final Exception the_exp) {
    // test failure for some reason other than assertion violation
    throw new TestException(the_exp.getMessage());
  }
}
>>