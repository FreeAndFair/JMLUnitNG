/*
 * OpenJMLUnit
 * 
 * @author "Daniel M. Zimmerman (dmz@acm.org)"
 * 
 * @module "OpenJML"
 * 
 * @creation_date "March 2010"
 * 
 * @last_updated_date "March 2010"
 * 
 * @keywords "unit testing", "JML"
 */

package org.jmlspecs.openjmlunit.iterator;

import java.util.Iterator;
import java.util.List;

import org.jmlspecs.openjmlunit.generator.MethodInfo;

/**
 * A repeated access iterator that generates arrays of objects by reflectively
 * using iterator generation methods to refresh individual array element
 * iterators.
 * 
 * @author Daniel M. Zimmerman
 * @version March 2010
 */
public class ObjectArrayIterator implements RepeatedAccessIterator {
  /**
   * The list of iterator generation methods
   */
  /*@ invariant (\forall MethodInfo m; my_iterator_generators.contains(m); 
    @             isIterator(m.getReturnType())); */
  private final List<MethodInfo> my_iterator_generators;

  /**
   * The current element.
   */
  // @ invariant my_element.size() == my_iterator_generators.size();
  private List<Object> my_element;

  /**
   * Creates a new ObjectArrayIterator that uses the given MethodInfo objects to
   * generate iterators. Each MethodInfo must have a return value that matches
   * java.util.Iterator<?>.
   * 
   * @param the_iterator_generators MethodInfo objects to use for generating
   *          iterators.
   * @throws IllegalArgumentException A MethodInfo in the list has a return type
   *           that is does not match java.util.Iterator<?>.
   */
  /*@ signals (IllegalArgumentException e)
    @         (\exists MethodInfo m; the_iterator_generators.contains(m); 
    @           !isIterator(m.getReturnType()));
   */
  public ObjectArrayIterator(final List<MethodInfo> the_iterator_generators)
    throws IllegalArgumentException {
    my_iterator_generators = the_iterator_generators;
    for (MethodInfo m : the_iterator_generators) {
      if (!isIterator(m.getReturnType().getFullyQualifiedName())) {
        throw new IllegalArgumentException("Iterator generator method " + 
          "return type is not assignable to type java.util.Iterator");
      }
    }
  }

  // @Override
  public void advance() {
    // TODO Auto-generated method stub

  }

  /**
   * Returns an ArrayList<Object>, where each object is generated by using an
   * iterator provided by the iterator generation method in the corresponding
   * position of the list.
   */
  // @Override
  public Object element() {
    return my_element;
  }

  // @Override
  public boolean hasMoreElements() {
    // TODO Auto-generated method stub
    return false;
  }

  /**
   * Returns true if the given class name is java.util.Iterator or the qualified
   * name of a child class of java.util.Iterator.
   * 
   * @param the_class_name The class name to test.
   * @return True if the given class name is the fully qualified class name of
   *         java.util.Iterator or a child class thereof. False otherwise.
   */
  // @ ensures \result ==
  // Iterator.class.isAssignableFrom(Class.forName(name.substring(0,
  // (name.indexOf('<') == -1 ? name.length() : name.indexOf('<')))))
  private/*@ pure */boolean isIterator(final String the_class_name) {
    int gen_pos = the_class_name.indexOf('<');
    if (gen_pos == -1) {
      gen_pos = the_class_name.length();
    }
    final String test = the_class_name.substring(0, gen_pos);
    try {
      return Iterator.class.isAssignableFrom(Class.forName(test));
    } catch (final ClassNotFoundException e) {
      return false;
    }
  }
  // Constraints

  // @constraint "The sequence of elements returned consists of arrays of
  // objects,
  // where each object is generated by using an iterator provided by
  // the iterator generation method in the corresponding position of
  // the list."

}
