/*
 * OpenJMLUnit
 * 
 * @author "Jonathan Hogins (jon.hogins@gmail.com)"
 * 
 * @module "OpenJML"
 * 
 * @creation_date "April 2010"
 * 
 * @last_updated_date "April 2010"
 * 
 * @keywords "unit testing", "JML"
 */

package org.jmlspecs.openjmlunit.strategy;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jmlspecs.openjmlunit.iterator.IteratorAdapter;
import org.jmlspecs.openjmlunit.iterator.RepeatedAccessIterator;

/**
 * Strategy for all non-primitive types.
 * 
 * @author Jonathan Hogins
 * @version April 2010
 */
public abstract class ObjectStrategy extends BasicStrategy {
  /**
   * The default values for this strategy.
   */
  private static final List<Object> DEFAULT_VALUES;
  static {
    final List<Object> defs = new ArrayList<Object>(1);
    defs.add(null);
    DEFAULT_VALUES = Collections.unmodifiableList(defs);
  }

  /**
   * The test data class found for the given strategy class.
   */
  private Class<? extends ObjectStrategy> my_test_data;

  /**
   * Creates a new ObjectStrategy for the given class. Default values will be
   * generated by the test data class for the_class if present.
   * 
   * @param the_class The class for which to use test data from.
   */
  @SuppressWarnings("unchecked")
  public ObjectStrategy(final Class<?> the_class) {
    try {
      Class<?> data_class = Class.forName(the_class.getName() + 
        "_JML_Test_Data$ClassObjectStrategy");
      if (ObjectStrategy.class.isAssignableFrom(data_class)) {
        my_test_data = (Class<? extends ObjectStrategy>) data_class;
      }
    } catch (ClassNotFoundException e) {
      my_test_data = null;
    }
  }

  /**
   * Returns an iterator over the values defined in the class' test data
   * definition if it exists. Otherwise, returns an iterator over
   * DEFAULT_VALUES.
   * 
   * @return An Iterator over default values.
   */
  public RepeatedAccessIterator<?> getDefaultValues() {
    if (my_test_data == null) {
      return new IteratorAdapter<Object>(DEFAULT_VALUES.iterator());
    } else {
      try {
        return my_test_data.newInstance().iterator();
      } catch (InstantiationException e) {
        e.printStackTrace();
        return new IteratorAdapter<Object>(DEFAULT_VALUES.iterator());
      } catch (IllegalAccessException e) {
        e.printStackTrace();
        return new IteratorAdapter<Object>(DEFAULT_VALUES.iterator());
      }
    }
  }
}
